/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 MiniJesusSwing.gltf --transform 
Files: MiniJesusSwing.gltf [8.04MB] > MiniJesusSwing-transformed.glb [352.22KB] (96%)
*/

import React, { useRef, useEffect, forwardRef, useImperativeHandle, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import * as THREE from 'three';

const MiniJesusSwing = forwardRef((props, ref) => {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/../../../public/JesusSwing/MiniJesusSwing-transformed.glb')
  const { actions, names, mixer } = useAnimations(animations, group)
  
  // const [startAnim, setStartAnim] = useState(true);
  var startAnim = true;
  let time = 0;

  useEffect(() => {
    // actions[names[1]].paused = true;
    actions[names[0]].play();
    actions[names[0]].timeScale = 0;
    // actions[names[0]].setLoop(THREE.LoopOnce, 1);
  }, [])


  // useEffect(() => {
  //   const playIdle = (e) => {
  //     actions[names[1]].play();
  //   };
  //   mixer.addEventListener('finished', playIdle);
  //   return () => {
  //     mixer.removeEventListener('finished', playIdle);
  //   };
  //   }, [])
  ;


    useFrame((state) => {
      // const time = state.clock.getElapsedTime();
        time = time + 0.01;

      if (time > .6) {
        // setStartAnim(false);
        actions[names[0]].timeScale = 0;
      }
    });
    
    
    useImperativeHandle(ref, () => ({
      playAnim() {
        console.log("child function called from parent");
        // setEndAnimation(true);
        // actions[names[1]].timeScale = 0;
        time = 0;
        actions[names[0]].timeScale = 1.7;
        actions[names[0]].reset();
      // actions[names[0]].reset();
      // actions[names[0]].time = 2;
      // actions[names[1]].paused = true;
    }
  }));





  // const mixerRef = useRef();

  // if (mixerRef.current === undefined) {
  //   mixerRef.current = new THREE.AnimationMixer(nodes.names[0]);
  //   const clipAction = mixerRef.current.clipAction(animations[0]);
  //   clipAction.play();
  // }

  // // const { time, start, pause, reset, status } = useTimer();

  // useFrame((_, delta) => {
  //   if (mixerRef.current) {
  //     mixerRef.current.update(delta);

  //     // Get the first animation clip and its duration
  //     const firstClip = animations[0];
  //     const duration = firstClip.duration;

  //     // Get the first clip action
  //     const clipAction = mixerRef.current.clipAction(firstClip);

  //     // Get the current time of the clip action
  //     const currentTime = clipAction.time;

  //     // Check if the animation has ended
  //     if (currentTime >= duration) {
  //       console.log('Animation ended.');
  //       // Perform actions when the animation ends
  //     }
  //   }
  // });


  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.Hip_J} />
        </group>
        <group name="Mini_Jesus" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <skinnedMesh name="Mesh" geometry={nodes.Mesh.geometry} material={materials.PaletteMaterial001} skeleton={nodes.Mesh.skeleton} />
          <skinnedMesh name="Mesh_1" geometry={nodes.Mesh_1.geometry} material={materials.PaletteMaterial001} skeleton={nodes.Mesh_1.skeleton} />
          <skinnedMesh name="Mesh_2" geometry={nodes.Mesh_2.geometry} material={materials.PaletteMaterial001} skeleton={nodes.Mesh_2.skeleton} />
          <skinnedMesh name="Mesh_3" geometry={nodes.Mesh_3.geometry} material={materials.PaletteMaterial001} skeleton={nodes.Mesh_3.skeleton} />
          <skinnedMesh name="Mesh_4" geometry={nodes.Mesh_4.geometry} material={materials.Face} skeleton={nodes.Mesh_4.skeleton} />
          <skinnedMesh name="Mesh_5" geometry={nodes.Mesh_5.geometry} material={materials.PaletteMaterial001} skeleton={nodes.Mesh_5.skeleton} />
          <skinnedMesh name="Mesh_6" geometry={nodes.Mesh_6.geometry} material={materials.PaletteMaterial001} skeleton={nodes.Mesh_6.skeleton} />
        </group>
      </group>
    </group>
  )
});


useGLTF.preload('/../../../public/JesusSwing/MiniJesusSwing-transformed.glb')

export default MiniJesusSwing;